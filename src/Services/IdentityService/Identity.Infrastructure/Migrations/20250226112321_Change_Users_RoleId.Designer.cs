// <auto-generated />
using System;
using Identity.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Identity.Infrastructure.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20250226112321_Change_Users_RoleId")]
    partial class Change_Users_RoleId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Identity.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8311047-8829-4aa0-9d4a-39006e8e01c8"),
                            Description = "Regular users who attend events",
                            Name = "Attendee",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("ee8611ad-bb96-4a42-97a1-2bd99763abe5"),
                            Description = "Users who can create and manage events",
                            Name = "Organizer",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("c3a1a8c4-524f-4fd5-8ebd-7d87790347d3"),
                            Description = "Partner businesses that can offer services",
                            Name = "Vendor",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("bd2f7c20-d56c-409a-a60b-7c178e0130c5"),
                            Description = "Special guests who present or perform at events",
                            Name = "Speaker/Performer",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("64f55c17-c5d1-4c1e-8cbb-1a48f6c3c1d5"),
                            Description = "Platform administrators with full system access",
                            Name = "Admin",
                            Type = 5
                        },
                        new
                        {
                            Id = new Guid("a8a05f76-9c4f-4dd9-a8fd-dd9d927aad95"),
                            Description = "Internal system services for automation",
                            Name = "System Service",
                            Type = 6
                        },
                        new
                        {
                            Id = new Guid("3c94539e-8c14-4e98-9241-64ba31a6da54"),
                            Description = "Users who can moderate content and discussions",
                            Name = "Moderator",
                            Type = 7
                        },
                        new
                        {
                            Id = new Guid("b7f76f67-2b1b-4d4e-a13c-95d5022bc714"),
                            Description = "Users who can create and manage advertisements",
                            Name = "Advertiser",
                            Type = 8
                        });
                });

            modelBuilder.Entity("Identity.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastLoginAt");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Identity.Domain.Entities.User", b =>
                {
                    b.OwnsOne("Identity.Domain.ValueObjects.Users.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Identity.Domain.ValueObjects.Users.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("PasswordHash");

                            b1.Property<string>("Salt")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("PasswordSalt");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
